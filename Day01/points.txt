Python
-------
Java, dotnet 

Scripting tool
--------------
Perl    -  Special Variables

Python  -  Ready made functions

st = "The quick fox jumps over the lazy dog"

1. length of the string
2. how many times each alphabet is used

C or C++ or Dotnet or Java


Desktop Application - TKinter (Python and TK)

Web Application	- JavaScript - REST API, MVC (Flask and Django)

Mobile 	      - Kivy

Testing    - Unittest, Pytest, Playwright, RoboFramework

Automation - paramiko, 

Webscrapping - Beautifulsoup, request

-------------------------------------------------
DATA - millions of records - accuracy

Datascience - Data analytics

Deep Learning

ML  - Blood Test, X ray, MRI, Petscan

AI - Gerative AI (NLP) - Driverless car

Python is opensource
--------------------


Flavours of Python
------------------
1. CPython	- currently using

2. Jython	- Python code gets converted to JAVA

3. Iron Python  - Python code in dotnet environment

Versions
--------
2.x  - syntax, libraries updated 
---
print "Hello World"

reduce - functools

deprecated - 

3.x
---
print("Hello World")


migrating - 2.x to 3.x  (framework)


www.python.org
3.12.x

-----------------------------------------------------------------
IDE - Editor

IDLE - Integrated Development Environment

PyCharm CE - (jetbrains)

VS code CE 

Eclipse - patch

sublime text

Anaconda - Jupyter Notebook

google colabs


Python 
------
1. Python SDK 

2. Python Shell - interactive environment -

3. IDLE

Operators Overloaded by default
-------------------------------
+  - addition, concatenation

*  - multiplication and to print a string n number of times

2.x primary data types
======================
1. Numbers
  a. integer
  b. long     -  2289082787587590292L
  c. float 
  d. complex


importlib -> reload
from importlib import reload
reload()


os.getcwd()
os.cpu_count()

Coding Rules
------------
#! c:\Python - SHEBANG - gives the path of python executable

#! /usr/bin 



Comments
--------
# - comment a single line comment

strings in python
-----------------
enclose it in " " or ' '

st = "Hello World"
st = 'Hello World'


multiple line string 
--------------------
st = """
the quick brown fox jumps over the lazy dog.
the quick brown fox jumps over the lazy dog.
the quick brown fox jumps over the lazy dog.
the quick brown fox jumps over the lazy dog.
the quick brown fox jumps over the lazy dog.
the quick brown fox jumps over the lazy dog.
the quick brown fox jumps over the lazy dog.
the quick brown fox jumps over the lazy dog.
"""

"""
the quick brown fox jumps over the lazy dog.
the quick brown fox jumps over the lazy dog.
the quick brown fox jumps over the lazy dog.
the quick brown fox jumps over the lazy dog.
the quick brown fox jumps over the lazy dog.
the quick brown fox jumps over the lazy dog.
the quick brown fox jumps over the lazy dog.
the quick brown fox jumps over the lazy dog.
"""

python does not use paranthesis { }
------------------------------------
1. if condition
2. for loop
3. functions
4. classes

function fun()
{
   print("hello world")  

}


def fun():
   print("hello world")

Primitive Data types
--------------------
1. Numbers
  a. integers
  b. float
  c. complex

2. Strings
3. Boolean

--------------------------------
OR
--
0101
0011
----
0111    - 7
----

AND
---
0101
0011
----
0001    - 1
----

XOR
---

0101
0011
----
0110
----

Right shift
===========
0101 => 0010
0010 -> 2

left shift
===========
1000 - 8
10000 - 16


control structures and loops
----------------------------

control structures
------------------
1. if codition


Loops
-----
1. for loop
2. while


2.x
---
input - accept in numbers
raw_input - string

3.x
---
input - string

Loops
-----
for loop
--------
foreach loop - foreach loop depend on a collection of objects

for loop depends on numbers generated by range function

1. continue  - skip current iteration
2. break     - stop the iteration
3. else

print
-----
print(data, sep=, end="\n")

print this pattern

1 2 3 4 5
 1 2 3 4
  1 2 3
   1 2
    1
   2 1
  3 2 1
 4 3 2 1
5 4 3 2 1

print all prime numbers between 150 and 50



